#! /usr/bin/env python
import sys
import json
import argparse
import subprocess
import pipes

configuration = {
    'json-data': True,
    'pretty': sys.stdout.isatty(),
    'header-accept': True,
    'header-content-type': True,
    'silence': True,
}

parser = argparse.ArgumentParser()
parser.add_argument('--no-json-data', action='store_true')
parser.add_argument('--no-pretty', action='store_true')
parser.add_argument('--pretty', action='store_true')
parser.add_argument('--no-silence', action='store_true')
parser.add_argument('--no-accept', action='store_true')
parser.add_argument('--no-content-type', action='store_true')
parser.add_argument('-d', '--data', action='append')
parser.add_argument('--data-json', action='append')
parsed_arguments = parser.parse_known_args(sys.argv[1:])

options = parsed_arguments[0]

if options.no_json_data:
    configuration['json-data'] = False
if options.pretty:
    configuration['pretty'] = True
if options.no_pretty:
    configuration['pretty'] = False
if options.no_accept:
    configuration['header-accept'] = False
if options.no_content_type:
    configuration['header-content-type'] = False
if options.no_silence:
    configuration['silence'] = False

json_data = options.data_json or []
curl_args = []

if configuration['json-data']:
    json_data.extend(options.data or [])
    raw_data = []
else:
    raw_data = options.data or []

if configuration['silence']:
    curl_args.append('-sS')

if configuration['header-accept']:
    curl_args.append('-H')
    curl_args.append('Accept: application/json')

for d in raw_data:
    curl_args.append('-d '+d)


def maybe_json(string):
    try:
        return json.loads(string)
    except:
        return string
if json_data:
    if configuration['header-content-type']:
        curl_args.append('-H')
        curl_args.append('Content-Type: application/json')
    json_dict = {}
    for d in json_data:
        key_val = d.split('=', 2)
        json_dict[key_val[0]] = maybe_json(key_val[1])
    curl_args.append('--data-binary')
    curl_args.append(json.dumps(json_dict))

curl_args.extend(parsed_arguments[1])
curl_args = map(pipes.quote, curl_args)

input = sys.stdin
err_out = sys.stderr

if configuration['pretty']:
    output = subprocess.PIPE
else:
    output = sys.stdout

curl_args.insert(0, 'curl')
curl_cmd = ' '.join(curl_args)

subproc = subprocess.Popen(
    curl_cmd,
    stdin=input,
    stdout=output,
    stderr=err_out,
    shell=True)


if configuration['pretty']:
    response, _ = subproc.communicate()
    try:
        result = json.loads(response)
        json.dump(result, sys.stdout, indent=2)
        print('')  # json.dump does not add final newline.
    except ValueError:
        sys.stdout.write(response)

sys.exit(subproc.returncode)
